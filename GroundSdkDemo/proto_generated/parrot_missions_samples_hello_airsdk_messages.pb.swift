// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: parrot_missions_samples_hello_airsdk_messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Union of all possible commands of this package.
struct Parrot_Missions_Samples_Hello_Airsdk_Messages_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Parrot_Missions_Samples_Hello_Airsdk_Messages_Command.OneOf_ID? = nil

  /// Ask to start say hello (ground)
  var say: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .say(let v)? = id {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {id = .say(newValue)}
  }

  /// Ask to stop say hello (ground)
  var hold: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .hold(let v)? = id {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {id = .hold(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    /// Ask to start say hello (ground)
    case say(SwiftProtobuf.Google_Protobuf_Empty)
    /// Ask to stop say hello (ground)
    case hold(SwiftProtobuf.Google_Protobuf_Empty)

  #if !swift(>=4.1)
    static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Command.OneOf_ID, rhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Command.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.say, .say): return {
        guard case .say(let l) = lhs, case .say(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.hold, .hold): return {
        guard case .hold(let l) = lhs, case .hold(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Union of all possible events of this package.
struct Parrot_Missions_Samples_Hello_Airsdk_Messages_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Parrot_Missions_Samples_Hello_Airsdk_Messages_Event.OneOf_ID? = nil

  /// Count of hello (ground)
  var count: UInt32 {
    get {
      if case .count(let v)? = id {return v}
      return 0
    }
    set {id = .count(newValue)}
  }

  /// Stereo sees something close (all)
  var stereoClose: Bool {
    get {
      if case .stereoClose(let v)? = id {return v}
      return false
    }
    set {id = .stereoClose(newValue)}
  }

  /// Drone is moving/steady (ground)
  var droneMoving: Bool {
    get {
      if case .droneMoving(let v)? = id {return v}
      return false
    }
    set {id = .droneMoving(newValue)}
  }

  /// Mean depth to closest object
  var depthMean: Float {
    get {
      if case .depthMean(let v)? = id {return v}
      return 0
    }
    set {id = .depthMean(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    /// Count of hello (ground)
    case count(UInt32)
    /// Stereo sees something close (all)
    case stereoClose(Bool)
    /// Drone is moving/steady (ground)
    case droneMoving(Bool)
    /// Mean depth to closest object
    case depthMean(Float)

  #if !swift(>=4.1)
    static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Event.OneOf_ID, rhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Event.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.count, .count): return {
        guard case .count(let l) = lhs, case .count(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stereoClose, .stereoClose): return {
        guard case .stereoClose(let l) = lhs, case .stereoClose(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.droneMoving, .droneMoving): return {
        guard case .droneMoving(let l) = lhs, case .droneMoving(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.depthMean, .depthMean): return {
        guard case .depthMean(let l) = lhs, case .depthMean(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "parrot.missions.samples.hello.airsdk.messages"

extension Parrot_Missions_Samples_Hello_Airsdk_Messages_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "say"),
    2: .same(proto: "hold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .say(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .say(v)
        }
      }()
      case 2: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .hold(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .hold(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .say?: try {
      guard case .say(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .hold?: try {
      guard case .hold(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Command, rhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Parrot_Missions_Samples_Hello_Airsdk_Messages_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .standard(proto: "stereo_close"),
    3: .standard(proto: "drone_moving"),
    4: .standard(proto: "depth_mean"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.id != nil {try decoder.handleConflictingOneOf()}
          self.id = .count(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.id != nil {try decoder.handleConflictingOneOf()}
          self.id = .stereoClose(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.id != nil {try decoder.handleConflictingOneOf()}
          self.id = .droneMoving(v)
        }
      }()
      case 4: try {
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {
          if self.id != nil {try decoder.handleConflictingOneOf()}
          self.id = .depthMean(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .count?: try {
      guard case .count(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }()
    case .stereoClose?: try {
      guard case .stereoClose(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .droneMoving?: try {
      guard case .droneMoving(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .depthMean?: try {
      guard case .depthMean(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Event, rhs: Parrot_Missions_Samples_Hello_Airsdk_Messages_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
